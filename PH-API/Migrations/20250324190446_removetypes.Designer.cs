// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PH_API.Data;

#nullable disable

namespace PH_API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250324190446_removetypes")]
    partial class removetypes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PH_API.Models.Notebooks.ProjectNotebook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectNotebooks");
                });

            modelBuilder.Entity("PH_API.Models.ProjectPhases.ProjectPhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPhases");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("PH_API.Models.Repo.CategoryRepo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoryRepo");
                });

            modelBuilder.Entity("PH_API.Models.Repo.PhaseRepo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PhaseRepo");
                });

            modelBuilder.Entity("PH_API.Models.Repo.ResourceRepo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResourceRepo");
                });

            modelBuilder.Entity("PH_API.Models.Repo.TaskRepo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhaseOrder")
                        .HasColumnType("int");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ResourceId");

                    b.ToTable("TaskRepo");
                });

            modelBuilder.Entity("PH_API.Models.Resources.ProjectResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectResources");
                });

            modelBuilder.Entity("PH_API.Models.Tasks.ProjectSubTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectTaskId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectTaskId");

                    b.ToTable("ProjectSubTask");
                });

            modelBuilder.Entity("PH_API.Models.Tasks.ProjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("HasSubTasks")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectPhaseId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectTaskCategoryId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectPhaseId");

                    b.HasIndex("ProjectTaskCategoryId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("PH_API.Models.Tasks.ProjectTaskCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectTaskCategory");
                });

            modelBuilder.Entity("PH_API.Models.Tasks.ProjectTask_Resource", b =>
                {
                    b.Property<int>("ProjectTaskID")
                        .HasColumnType("int");

                    b.Property<int>("ProjectResourceID")
                        .HasColumnType("int");

                    b.HasKey("ProjectTaskID", "ProjectResourceID");

                    b.HasIndex("ProjectResourceID");

                    b.ToTable("ProjectTaskResources");
                });

            modelBuilder.Entity("PH_API.Models.Templates.CategoryTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskTemplateId")
                        .IsUnique();

                    b.ToTable("CategoryTemplates");
                });

            modelBuilder.Entity("PH_API.Models.Templates.NotebookTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotebookTemplates");
                });

            modelBuilder.Entity("PH_API.Models.Templates.PhaseTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhaseOrder")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("PhaseTemplates");
                });

            modelBuilder.Entity("PH_API.Models.Templates.ResourceTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("ResourceTemplates");
                });

            modelBuilder.Entity("PH_API.Models.Templates.SubTaskTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskTemplateId");

                    b.ToTable("SubTaskTemplate");
                });

            modelBuilder.Entity("PH_API.Models.Templates.TaskTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhaseOrder")
                        .HasColumnType("int");

                    b.Property<int>("PhaseTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhaseTemplateId");

                    b.ToTable("TaskTemplates");
                });

            modelBuilder.Entity("PH_API.Models.Templates.TaskTemplate_Resource", b =>
                {
                    b.Property<int>("TaskTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("ResourceTemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskTemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskTemplateId", "ResourceTemplateId");

                    b.HasIndex("ResourceTemplateId");

                    b.ToTable("TaskTemplate_Resource");
                });

            modelBuilder.Entity("PH_API.Models.Templates.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("PH_API.Models.Users.ProjectRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectRoles");
                });

            modelBuilder.Entity("PH_API.Models.Users.ProjectUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserPreferenceID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("ProjectUsers");
                });

            modelBuilder.Entity("PH_API.Models.Users.ProjectUserPreferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDarkMode")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSidebarHover")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProjectUserPreferences");
                });

            modelBuilder.Entity("PH_API.Models.Notebooks.ProjectNotebook", b =>
                {
                    b.HasOne("PH_API.Models.Projects.Project", "Project")
                        .WithMany("ProjectNotebooks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PH_API.Models.ProjectPhases.ProjectPhase", b =>
                {
                    b.HasOne("PH_API.Models.Projects.Project", "Project")
                        .WithMany("ProjectPhases")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PH_API.Models.Repo.TaskRepo", b =>
                {
                    b.HasOne("PH_API.Models.Repo.CategoryRepo", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("PH_API.Models.Repo.ResourceRepo", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId");

                    b.Navigation("Category");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("PH_API.Models.Resources.ProjectResource", b =>
                {
                    b.HasOne("PH_API.Models.Projects.Project", "Project")
                        .WithMany("ProjectResources")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PH_API.Models.Users.ProjectUser", "User")
                        .WithMany("ProjectResources")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PH_API.Models.Tasks.ProjectSubTask", b =>
                {
                    b.HasOne("PH_API.Models.Tasks.ProjectTask", "ProjectTask")
                        .WithMany("ProjectSubTasks")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("PH_API.Models.Tasks.ProjectTask", b =>
                {
                    b.HasOne("PH_API.Models.ProjectPhases.ProjectPhase", "ProjectPhase")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectPhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PH_API.Models.Tasks.ProjectTaskCategory", "ProjectTaskCategory")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectTaskCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectPhase");

                    b.Navigation("ProjectTaskCategory");
                });

            modelBuilder.Entity("PH_API.Models.Tasks.ProjectTask_Resource", b =>
                {
                    b.HasOne("PH_API.Models.Resources.ProjectResource", "ProjectResource")
                        .WithMany("AssigneedResources")
                        .HasForeignKey("ProjectResourceID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PH_API.Models.Tasks.ProjectTask", "ProjectTask")
                        .WithMany("AssigneedResources")
                        .HasForeignKey("ProjectTaskID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProjectResource");

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("PH_API.Models.Templates.CategoryTemplate", b =>
                {
                    b.HasOne("PH_API.Models.Templates.TaskTemplate", "TaskTemplate")
                        .WithOne("CategoryTemplate")
                        .HasForeignKey("PH_API.Models.Templates.CategoryTemplate", "TaskTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TaskTemplate");
                });

            modelBuilder.Entity("PH_API.Models.Templates.PhaseTemplate", b =>
                {
                    b.HasOne("PH_API.Models.Templates.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("PH_API.Models.Templates.ResourceTemplate", b =>
                {
                    b.HasOne("PH_API.Models.Templates.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("PH_API.Models.Templates.SubTaskTemplate", b =>
                {
                    b.HasOne("PH_API.Models.Templates.TaskTemplate", "TaskTemplate")
                        .WithMany("SubTaskTemplates")
                        .HasForeignKey("TaskTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskTemplate");
                });

            modelBuilder.Entity("PH_API.Models.Templates.TaskTemplate", b =>
                {
                    b.HasOne("PH_API.Models.Templates.PhaseTemplate", "PhaseTemplate")
                        .WithMany("TemplateTasks")
                        .HasForeignKey("PhaseTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhaseTemplate");
                });

            modelBuilder.Entity("PH_API.Models.Templates.TaskTemplate_Resource", b =>
                {
                    b.HasOne("PH_API.Models.Templates.ResourceTemplate", "ResourceTemplate")
                        .WithMany("TaskTemplateResources")
                        .HasForeignKey("ResourceTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PH_API.Models.Templates.TaskTemplate", "TaskTemplate")
                        .WithMany("TaskTemplateResources")
                        .HasForeignKey("TaskTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ResourceTemplate");

                    b.Navigation("TaskTemplate");
                });

            modelBuilder.Entity("PH_API.Models.Users.ProjectUser", b =>
                {
                    b.HasOne("PH_API.Models.Users.ProjectRole", "Role")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PH_API.Models.Users.ProjectUserPreferences", b =>
                {
                    b.HasOne("PH_API.Models.Users.ProjectUser", "User")
                        .WithOne("UserPreferences")
                        .HasForeignKey("PH_API.Models.Users.ProjectUserPreferences", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PH_API.Models.ProjectPhases.ProjectPhase", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Project", b =>
                {
                    b.Navigation("ProjectNotebooks");

                    b.Navigation("ProjectPhases");

                    b.Navigation("ProjectResources");
                });

            modelBuilder.Entity("PH_API.Models.Resources.ProjectResource", b =>
                {
                    b.Navigation("AssigneedResources");
                });

            modelBuilder.Entity("PH_API.Models.Tasks.ProjectTask", b =>
                {
                    b.Navigation("AssigneedResources");

                    b.Navigation("ProjectSubTasks");
                });

            modelBuilder.Entity("PH_API.Models.Tasks.ProjectTaskCategory", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("PH_API.Models.Templates.PhaseTemplate", b =>
                {
                    b.Navigation("TemplateTasks");
                });

            modelBuilder.Entity("PH_API.Models.Templates.ResourceTemplate", b =>
                {
                    b.Navigation("TaskTemplateResources");
                });

            modelBuilder.Entity("PH_API.Models.Templates.TaskTemplate", b =>
                {
                    b.Navigation("CategoryTemplate");

                    b.Navigation("SubTaskTemplates");

                    b.Navigation("TaskTemplateResources");
                });

            modelBuilder.Entity("PH_API.Models.Users.ProjectRole", b =>
                {
                    b.Navigation("ProjectUsers");
                });

            modelBuilder.Entity("PH_API.Models.Users.ProjectUser", b =>
                {
                    b.Navigation("ProjectResources");

                    b.Navigation("UserPreferences");
                });
#pragma warning restore 612, 618
        }
    }
}
