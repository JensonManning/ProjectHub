// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PH_API.Data;

#nullable disable

namespace PH_API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250401042153_morestuff")]
    partial class morestuff
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PH_API.Models.Projects.Notebooks.ProjectNotebook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectNotebooks");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Phases.ProjectPhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPhases");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Resources.ProjectResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectResources");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Tasks.ProjectSubTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectTaskId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectTaskId");

                    b.ToTable("ProjectSubTasks");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Tasks.ProjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("HasSubTasks")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectPhaseId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectTaskCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectTaskTypeId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectPhaseId");

                    b.HasIndex("ProjectTaskCategoryId");

                    b.HasIndex("ProjectTaskTypeId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Tasks.ProjectTaskCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectPhaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectPhaseId");

                    b.ToTable("ProjectTaskCategories");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Tasks.ProjectTaskComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectTaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectTaskId");

                    b.ToTable("ProjectTaskComments");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Tasks.ProjectTaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectTaskTypes");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Tasks.ProjectTask_Resource", b =>
                {
                    b.Property<int>("ProjectTaskId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectResourceId")
                        .HasColumnType("int");

                    b.HasKey("ProjectTaskId", "ProjectResourceId");

                    b.HasIndex("ProjectResourceId");

                    b.ToTable("ProjectTaskResources");
                });

            modelBuilder.Entity("PH_API.Models.Repo.CategoryRepo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoryRepo");
                });

            modelBuilder.Entity("PH_API.Models.Repo.NotebookRepo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotebookRepo");
                });

            modelBuilder.Entity("PH_API.Models.Repo.PhaseRepo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PhaseRepo");
                });

            modelBuilder.Entity("PH_API.Models.Repo.ResourceRepo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResourceRepo");
                });

            modelBuilder.Entity("PH_API.Models.Repo.SubTaskRepo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("SubTaskRepo");
                });

            modelBuilder.Entity("PH_API.Models.Repo.TaskRepo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryRepoId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasSubTaskRepo")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhaseOrder")
                        .HasColumnType("int");

                    b.Property<int?>("TaskTypeRepoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryRepoId");

                    b.HasIndex("TaskTypeRepoId");

                    b.ToTable("TaskRepo");
                });

            modelBuilder.Entity("PH_API.Models.Repo.TaskRepo_ResourceRepo", b =>
                {
                    b.Property<int>("TaskRepoId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceRepoId")
                        .HasColumnType("int");

                    b.Property<string>("ResourceRepoName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskRepoId", "ResourceRepoId");

                    b.HasIndex("ResourceRepoId");

                    b.ToTable("TaskRepoResources");
                });

            modelBuilder.Entity("PH_API.Models.Repo.TaskTypeRepo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaskTypeRepo");
                });

            modelBuilder.Entity("PH_API.Models.Users.ProjectRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectRoles");
                });

            modelBuilder.Entity("PH_API.Models.Users.ProjectUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("ProjectUsers");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Notebooks.ProjectNotebook", b =>
                {
                    b.HasOne("PH_API.Models.Projects.Project", "Project")
                        .WithMany("ProjectNotebooks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Phases.ProjectPhase", b =>
                {
                    b.HasOne("PH_API.Models.Projects.Project", "Project")
                        .WithMany("ProjectPhases")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Resources.ProjectResource", b =>
                {
                    b.HasOne("PH_API.Models.Projects.Project", "Project")
                        .WithMany("ProjectResources")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PH_API.Models.Users.ProjectUser", "User")
                        .WithMany("ProjectResources")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Tasks.ProjectSubTask", b =>
                {
                    b.HasOne("PH_API.Models.Projects.Tasks.ProjectTask", "ProjectTask")
                        .WithMany("ProjectSubTasks")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Tasks.ProjectTask", b =>
                {
                    b.HasOne("PH_API.Models.Projects.Phases.ProjectPhase", "ProjectPhase")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectPhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PH_API.Models.Projects.Tasks.ProjectTaskCategory", "ProjectTaskCategory")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectTaskCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PH_API.Models.Projects.Tasks.ProjectTaskType", "ProjectTaskType")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectTaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectPhase");

                    b.Navigation("ProjectTaskCategory");

                    b.Navigation("ProjectTaskType");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Tasks.ProjectTaskCategory", b =>
                {
                    b.HasOne("PH_API.Models.Projects.Phases.ProjectPhase", null)
                        .WithMany("ProjectTaskCategories")
                        .HasForeignKey("ProjectPhaseId");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Tasks.ProjectTaskComment", b =>
                {
                    b.HasOne("PH_API.Models.Projects.Tasks.ProjectTask", "ProjectTask")
                        .WithMany("ProjectTaskComments")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Tasks.ProjectTask_Resource", b =>
                {
                    b.HasOne("PH_API.Models.Projects.Resources.ProjectResource", "ProjectResource")
                        .WithMany("ProjectTaskResources")
                        .HasForeignKey("ProjectResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PH_API.Models.Projects.Tasks.ProjectTask", "ProjectTask")
                        .WithMany("ProjectTaskResources")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProjectResource");

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("PH_API.Models.Repo.SubTaskRepo", b =>
                {
                    b.HasOne("PH_API.Models.Repo.TaskRepo", "Task")
                        .WithMany("SubTaskRepo")
                        .HasForeignKey("TaskId");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("PH_API.Models.Repo.TaskRepo", b =>
                {
                    b.HasOne("PH_API.Models.Repo.CategoryRepo", "CategoryRepo")
                        .WithMany("TaskRepo")
                        .HasForeignKey("CategoryRepoId");

                    b.HasOne("PH_API.Models.Repo.TaskTypeRepo", "TaskTypeRepo")
                        .WithMany("TaskRepos")
                        .HasForeignKey("TaskTypeRepoId");

                    b.Navigation("CategoryRepo");

                    b.Navigation("TaskTypeRepo");
                });

            modelBuilder.Entity("PH_API.Models.Repo.TaskRepo_ResourceRepo", b =>
                {
                    b.HasOne("PH_API.Models.Repo.ResourceRepo", "ResourceRepo")
                        .WithMany("TaskRepoResources")
                        .HasForeignKey("ResourceRepoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PH_API.Models.Repo.TaskRepo", "TaskRepo")
                        .WithMany("TaskRepoResources")
                        .HasForeignKey("TaskRepoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResourceRepo");

                    b.Navigation("TaskRepo");
                });

            modelBuilder.Entity("PH_API.Models.Users.ProjectUser", b =>
                {
                    b.HasOne("PH_API.Models.Users.ProjectRole", "Role")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Phases.ProjectPhase", b =>
                {
                    b.Navigation("ProjectTaskCategories");

                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Project", b =>
                {
                    b.Navigation("ProjectNotebooks");

                    b.Navigation("ProjectPhases");

                    b.Navigation("ProjectResources");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Resources.ProjectResource", b =>
                {
                    b.Navigation("ProjectTaskResources");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Tasks.ProjectTask", b =>
                {
                    b.Navigation("ProjectSubTasks");

                    b.Navigation("ProjectTaskComments");

                    b.Navigation("ProjectTaskResources");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Tasks.ProjectTaskCategory", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("PH_API.Models.Projects.Tasks.ProjectTaskType", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("PH_API.Models.Repo.CategoryRepo", b =>
                {
                    b.Navigation("TaskRepo");
                });

            modelBuilder.Entity("PH_API.Models.Repo.ResourceRepo", b =>
                {
                    b.Navigation("TaskRepoResources");
                });

            modelBuilder.Entity("PH_API.Models.Repo.TaskRepo", b =>
                {
                    b.Navigation("SubTaskRepo");

                    b.Navigation("TaskRepoResources");
                });

            modelBuilder.Entity("PH_API.Models.Repo.TaskTypeRepo", b =>
                {
                    b.Navigation("TaskRepos");
                });

            modelBuilder.Entity("PH_API.Models.Users.ProjectRole", b =>
                {
                    b.Navigation("ProjectUsers");
                });

            modelBuilder.Entity("PH_API.Models.Users.ProjectUser", b =>
                {
                    b.Navigation("ProjectResources");
                });
#pragma warning restore 612, 618
        }
    }
}
