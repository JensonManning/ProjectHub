import{i as c,j as g}from"./chunk-T7MGDWGT.js";import{a as U}from"./chunk-NB76KGKE.js";import{O as d,U as p,k as i,l as u,na as n,pc as a,qc as h,z as o}from"./chunk-U6KPTH7L.js";var m=class s{http=p(U);apiUrl=g.apiUrl;selectedUser=n({});selectedUsers=n([]);currentUser=a(()=>this.getCurrentUserResource?.value()||{});getCurrentUserResource=c({loader:()=>this.http.get(this.apiUrl+"ProjectUser/currentuser").pipe(o(e=>(console.error("Error getting current user:",e),i({}))))});allUsers=a(()=>this.getAllUsersResource?.value()||[]);getAllUsersResource=c({loader:()=>this.http.get(this.apiUrl+"ProjectUser").pipe(o(e=>(console.error("Error getting all users:",e),i([]))))});handleError(e){console.error("API Error:",e);let r="An unknown error occurred";return e.status===404?r="Resource not found":e.status===500&&(r="Internal server error"),u(()=>new Error(r))}editUser(e,r){let t={id:e,name:r.name,email:r.email,phone:r.phone,roleId:r.roleId||r.role?.id};console.log(`Updating user ID: ${e} with data:`,t),this.http.put(this.apiUrl+"ProjectUser/"+e,t).pipe(o(l=>this.handleError(l))).subscribe({next:()=>{this.getAllUsersResource.reload(),console.log(r,"updated")},error:l=>console.error("Failed to update user:",l)})}createUser(e){let r={id:e.id,name:e.name,email:e.email,phone:e.phone,roleId:e.roleId||e.role?.id};console.log("Creating user with data:",r),this.http.post(this.apiUrl+"ProjectUser",r).pipe(o(t=>this.handleError(t))).subscribe({next:()=>{this.getAllUsersResource.reload(),console.log(e,"created")},error:t=>console.error("Failed to create user:",t)})}deleteUser(e){this.http.delete(this.apiUrl+"ProjectUser/"+e).pipe(o(r=>this.handleError(r))).subscribe({next:()=>{this.getAllUsersResource.reload(),console.log(e,"deleted")},error:r=>console.error("Failed to delete user:",r)})}constructor(){h(()=>{console.log(this.getCurrentUserResource.value())})}static \u0275fac=function(r){return new(r||s)};static \u0275prov=d({token:s,factory:s.\u0275fac,providedIn:"root"})};export{m as a};
